STAGING_DIR?=/tmp/ceres-base
STAGING_IMAGE?=${BINARIES_DIR}/ceres-base.img
STAGING_IMAGE_SIZE?=64M

SQUASH_IMAGE?=${BINARIES_DIR}/rootfs.squashfs
KERNEL_IMAGE?=${BINARIES_DIR}/bzImage
INITRAMFS_IMAGE?=${TARGET_DIR}/boot/ceres-init.cpio.gz
BOOTLOADER_IMAGE=${HOST_DIR}/usr/share/syslinux/mbr.bin

MOUNT_DIR_BOOT?=/mnt/ceres-partition-boot
MOUNT_DIR_PERSIST?=/mnt/ceres-partition-persist

RELEASE=$(shell cat metadata/release)
VERSION=$(shell cat metadata/version)
BUILD=$(shell printf '.%04g' `git rev-list --count HEAD 2>/dev/null` || echo "")

define progress_out
	@echo "\033[1;33m*** $(1) ***\033[0m"
endef

define success_out
	@echo "\033[1;92m*** $(1) ***\033[0m"
endef

define error_out
	 @echo "\033[1;91m*** $(1) ***\033[0m"
endef

build: preflight prepare-image mount-lo mount-special initramfs bootloader unmount-special system-stage unmount-lo postflight complete

all: build
	$(call success_out,Finished)
	$(call progress_out,Binary dir ${BINARIES_DIR})

preflight:
	$(call progress_out,Preflight)
	mkdir -p $(STAGING_DIR)
	mkdir -p $(STAGING_DIR)/boot

postflight:
	$(call progress_out,Postflight)
	rm -rf $(STAGING_DIR)
#	tar -C $(shell dirname $(STAGING_IMAGE))/ -cJf $(STAGING_IMAGE).tar.xz $(shell basename $(STAGING_IMAGE))
	qemu-img convert -O vmdk $(STAGING_IMAGE) $(STAGING_IMAGE).vmdk

complete:
	$(call success_out,Build complete)
	@echo "Standard image at $(STAGING_IMAGE)"
#	@echo "Compressed image at $(STAGING_IMAGE).tar.xz"
	@echo "VMware VMDK image at $(STAGING_IMAGE).vmdk"
	@echo "Squashfs file at $(SQUASH_IMAGE)"

error: clean
	$(call error_out,Build failed)

mount-special:
	$(call progress_out,Mount special filesystems in ${STAGING_DIR})
	mkdir -p $(STAGING_DIR)/proc
	mkdir -p $(STAGING_DIR)/dev
	mkdir -p $(STAGING_DIR)/sys
	mount --bind /proc $(STAGING_DIR)/proc
	mount --bind /dev $(STAGING_DIR)/dev
	mount --bind /sys $(STAGING_DIR)/sys

unmount-special:
	$(call progress_out,Unmount special filesystems from ${STAGING_DIR})
	umount -f $(STAGING_DIR)/proc
	umount -f $(STAGING_DIR)/dev
	umount -f $(STAGING_DIR)/sys
	rm -rf $(STAGING_DIR)/proc
	rm -rf $(STAGING_DIR)/dev
	rm -rf $(STAGING_DIR)/sys

prepare-image:
	$(call progress_out,Prepare disk image ${STAGING_IMAGE})
	touch $(STAGING_IMAGE)
	fallocate -l ${STAGING_IMAGE_SIZE} $(STAGING_IMAGE) || dd if=/dev/zero of=$(STAGING_IMAGE) bs=${STAGING_IMAGE_SIZE} count=1
	$(call progress_out,Partition disk image ${STAGING_IMAGE})
	parted -s $(STAGING_IMAGE) -- mklabel msdos mkpart primary ext4 1m 17m mkpart primary 17m 49m mkpart primary 49m 100% toggle 1 boot
	modprobe loop

mount-lo:
	$(call progress_out,Mount disk image ${STAGING_IMAGE})
	mkdir -p $(MOUNT_DIR_BOOT)
	mkdir -p $(MOUNT_DIR_PERSIST)
	$(eval LOOP=$(shell losetup --show -f $(STAGING_IMAGE)))
	partprobe $(LOOP)
	mkfs.ext4 -F -O ^64bit $(LOOP)p1
	mkfs.ext4 -F -O ^64bit $(LOOP)p3
	mount $(LOOP)p1 $(MOUNT_DIR_BOOT)
	mount $(LOOP)p3 $(MOUNT_DIR_PERSIST)

unmount-lo:
	$(call progress_out,Unmount disk image ${STAGING_IMAGE})
	ls -Rlarth $(MOUNT_DIR_BOOT)
	ls -Rlarth $(MOUNT_DIR_PERSIST)
	umount -d $(MOUNT_DIR_BOOT)
	umount -d $(MOUNT_DIR_PERSIST)
	sleep 1
	rm -rf $(MOUNT_DIR_BOOT)
	rm -rf $(MOUNT_DIR_PERSIST)

initramfs:
#	$(call progress_out,Install ceres-init-generic)
#	rm -rf $(STAGING_DIR)/tmp/ceres-init-generic
#	git clone --depth 1 https://github.com/ceres/ceres-init-generic.git $(STAGING_DIR)/tmp/ceres-init-generic || true
#	chroot $(STAGING_DIR) bash -c "cd /tmp/ceres-init-generic/; rm -rf .git; make install"

bootloader:
	$(call progress_out,Configure bootloader)
	echo "default linux" > $(STAGING_DIR)/boot/extlinux.conf; \
	echo "prompt 0" >> $(STAGING_DIR)/boot/extlinux.conf; \
	echo "timeout 0" >> $(STAGING_DIR)/boot/extlinux.conf; \
	echo "" >> $(STAGING_DIR)/boot/extlinux.conf; \
	echo "label linux" >> $(STAGING_DIR)/boot/extlinux.conf; \
	echo "kernel /bzImage" >> $(STAGING_DIR)/boot/extlinux.conf; \
	echo "initrd /ceres-init.cpio.gz" >> $(STAGING_DIR)/boot/extlinux.conf; \
	echo "append root=/dev/sda2 rootfstype=squashfs ro" >> $(STAGING_DIR)/boot/extlinux.conf; \
	extlinux --install $(MOUNT_DIR_BOOT) --device=$(LOOP)p1; \
	dd if=$(BOOTLOADER_IMAGE) of=$(LOOP) conv=notrunc; \

system-stage:
	$(call progress_out,Copy kernel and squashfs into ${STAGING_IMAGE})
	cp $(KERNEL_IMAGE) $(MOUNT_DIR_BOOT)/bzImage
	cp $(INITRAMFS_IMAGE) $(MOUNT_DIR_BOOT)/ceres-init.cpio.gz
	cp -r $(STAGING_DIR)/boot/* $(MOUNT_DIR_BOOT)/
	dd if=$(SQUASH_IMAGE) of=$(LOOP)p2
	rm -rf $(STAGING_DIR)/boot

clean:
	$(call progress_out,Unmount special filesystems and loopbacks)
	while [ `mount | grep $(STAGING_DIR)/dev | wc -l` -gt 0 ]; do umount $(STAGING_DIR)/dev; done
	while [ `mount | grep $(STAGING_DIR)/sys | wc -l` -gt 0 ]; do umount $(STAGING_DIR)/sys; done
	while [ `mount | grep $(STAGING_DIR)/proc | wc -l` -gt 0 ]; do umount $(STAGING_DIR)/proc; done
	while [ `mount | grep $(MOUNT_DIR_BOOT)/dev | wc -l` -gt 0 ]; do umount $(MOUNT_DIR_BOOT)/dev; done
	while [ `mount | grep $(MOUNT_DIR_BOOT)/sys | wc -l` -gt 0 ]; do umount $(MOUNT_DIR_BOOT)/sys; done
	while [ `mount | grep $(MOUNT_DIR_BOOT)/proc | wc -l` -gt 0 ]; do umount $(MOUNT_DIR_BOOT)/proc; done
	while [ `mount | grep $(MOUNT_DIR_BOOT) | wc -l` -gt 0 ]; do umount $(MOUNT_DIR_BOOT); done
	while [ `mount | grep $(MOUNT_DIR_PERSIST) | wc -l` -gt 0 ]; do umount $(MOUNT_DIR_PERSIST); done
	while [ `mount | grep $(STAGING_DIR) | wc -l` -gt 0 ]; do umount $(STAGING_DIR); done
	@sleep 2
	$(call progress_out,Cleanup files and folders)
	rm -rf $(STAGING_DIR)
	rm -rf $(MOUNT_DIR_BOOT)
	rm -rf $(MOUNT_DIR_PERSIST)
	$(call success_out,Cleanup complete)

